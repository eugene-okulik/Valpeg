# Определение базового класса Book (Книга)
class Book:
    # Общие атрибуты для всех книг (классовые переменные)
    page_material = "бумага"  # Материал страниц по умолчанию
    has_text = True  # По умолчанию книга содержит текст

    # Конструктор класса (инициализатор)
    def __init__(self, title, author, page_count, isbn, reserved=False):
        # Устанавливаем индивидуальные атрибуты для каждой книги:
        self.title = title  # Название книги
        self.author = author  # Автор книги
        self.page_count = page_count  # Количество страниц
        self.isbn = isbn  # Уникальный ISBN номер
        self.reserved = reserved  # Флаг резервации (по умолчанию False)

    # Метод для строкового представления объекта
    def __str__(self):
        # Формируем строку с информацией о резервации (если книга зарезервирована)
        reserved_info = ", зарезервирована" if self.reserved else ""
        # Возвращаем форматированную строку с информацией о книге
        return (f"Название: {self.title}, Автор: {self.author}, "
                f"страниц: {self.page_count}, материал: {self.page_material}{reserved_info}")


# Определение дочернего класса SchoolBook (Учебник), наследующего от Book
class SchoolBook(Book):
    # Конструктор класса SchoolBook
    def __init__(self, title, author, page_count, isbn, subject, school_class, has_tasks, reserved=False):
        # Вызываем конструктор родительского класса
        super().__init__(title, author, page_count, isbn, reserved)
        # Добавляем специфичные атрибуты для учебников:
        self.subject = subject  # Предмет (математика, физика и т.д.)
        self.school_class = school_class  # Класс (цифра, для которого учебник)
        self.has_tasks = has_tasks  # Наличие заданий (True/False)

    # Метод для строкового представления учебника
    def __str__(self):
        # Формируем строку с информацией о резервации
        reserved_info = ", зарезервирована" if self.reserved else ""
        # Возвращаем форматированную строку с информацией об учебнике
        return (f"Название: {self.title}, Автор: {self.author}, "
                f"страниц: {self.page_count}, предмет: {self.subject}, "
                f"класс: {self.school_class}{reserved_info}")


# Создаем экземпляры обычных книг (5 штук)
book1 = Book("Идиот", "Достоевский", 500, "978-5-04-089580-2")  # Книга 1
book2 = Book("1984", "Джордж Оруэлл", 328, "978-5-17-090640-3")  # Книга 2
book3 = Book("Мастер и Маргарита", "Булгаков", 480, "978-5-17-067842-6")  # Книга 3
book4 = Book("Преступление и наказание", "Достоевский", 672, "978-5-04-103759-9")  # Книга 4
book5 = Book("Война и мир", "Толстой", 1225, "978-5-389-06256-6")  # Книга 5

# Помечаем одну книгу (book3) как зарезервированную
book3.reserved = True

# Выводим информацию о всех книгах
print("Обычные книги:")
# Перебираем все книги в списке и печатаем каждую
for book in [book1, book2, book3, book4, book5]:
    print(book)  # Вызов метода __str__() происходит автоматически

# Создаем экземпляры учебников (5 штук)
textbook1 = SchoolBook("Алгебра", "Иванов", 200, "978-5-09-071880-3", "Математика", 9, True)  # Учебник 1
textbook2 = SchoolBook("История России", "Петров", 240, "978-5-09-073420-9", "История", 10, True)  # Учебник 2
textbook3 = SchoolBook("География", "Сидоров", 180, "978-5-09-071882-7", "География", 8, False)  # Учебник 3
textbook4 = SchoolBook("Физика", "Васильев", 210, "978-5-09-071881-0", "Физика", 11, True)  # Учебник 4
textbook5 = SchoolBook("Биология", "Николаев", 190, "978-5-09-071883-4", "Биология", 7, False)  # Учебник 5

# Помечаем один учебник (textbook2) как зарезервированный
textbook2.reserved = True

# Выводим информацию об учебниках
print("\nУчебники:")  # \n добавляет пустую строку для разделения логических блоков вывода
# Перебираем все учебники в списке и печатаем каждый
for textbook in [textbook1, textbook2, textbook3, textbook4, textbook5]:
    print(textbook)  # Вызов метода __str__() происходит автоматически
