{"name": "Обновление объекта через PUT запрос", "status": "broken", "statusDetails": {"message": "TypeError: Object of type generator is not JSON serializable", "trace": "new_post_id = <generator object new_post_id at 0x1099af790>\n\n    @allure.title(\"Обновление объекта через PUT запрос\")\n    @allure.feature(\"Работа с объектами\")\n    @allure.story(\"Обновление объекта\")\n    def test_put_a_post(new_post_id):\n        body = {\n            'data': {\n                'color': 'yellow',\n                'size': 'very big'\n            },\n            'id': new_post_id,\n            'name': 'Second new object'\n        }\n        headers = {'Content-Type': 'application/json'}\n>       response = requests.put(\n            f'http://objapi.course.qa-practice.com/object/{new_post_id}',\n            json=body,\n            headers=headers\n        )\n\ntest_pytest.py:93: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n/Users/valpeg/Documents/my_first_python_project/pythonProject1/venv/lib/python3.12/site-packages/requests/api.py:130: in put\n    return request(\"put\", url, data=data, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n/Users/valpeg/Documents/my_first_python_project/pythonProject1/venv/lib/python3.12/site-packages/requests/api.py:59: in request\n    return session.request(method=method, url=url, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n/Users/valpeg/Documents/my_first_python_project/pythonProject1/venv/lib/python3.12/site-packages/requests/sessions.py:575: in request\n    prep = self.prepare_request(req)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^\n/Users/valpeg/Documents/my_first_python_project/pythonProject1/venv/lib/python3.12/site-packages/requests/sessions.py:484: in prepare_request\n    p.prepare(\n/Users/valpeg/Documents/my_first_python_project/pythonProject1/venv/lib/python3.12/site-packages/requests/models.py:370: in prepare\n    self.prepare_body(data, files, json)\n/Users/valpeg/Documents/my_first_python_project/pythonProject1/venv/lib/python3.12/site-packages/requests/models.py:510: in prepare_body\n    body = complexjson.dumps(json, allow_nan=False)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/json/__init__.py:238: in dumps\n    **kw).encode(obj)\n          ^^^^^^^^^^^\n/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/json/encoder.py:200: in encode\n    chunks = self.iterencode(o, _one_shot=True)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/json/encoder.py:258: in iterencode\n    return _iterencode(o, 0)\n           ^^^^^^^^^^^^^^^^^\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.encoder.JSONEncoder object at 0x10972a120>, o = <generator object new_post_id at 0x1099af790>\n\n    def default(self, o):\n        \"\"\"Implement this method in a subclass such that it returns\n        a serializable object for ``o``, or calls the base implementation\n        (to raise a ``TypeError``).\n    \n        For example, to support arbitrary iterators, you could\n        implement default like this::\n    \n            def default(self, o):\n                try:\n                    iterable = iter(o)\n                except TypeError:\n                    pass\n                else:\n                    return list(iterable)\n                # Let the base class default method raise the TypeError\n                return super().default(o)\n    \n        \"\"\"\n>       raise TypeError(f'Object of type {o.__class__.__name__} '\n                        f'is not JSON serializable')\nE       TypeError: Object of type generator is not JSON serializable\n\n/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/json/encoder.py:180: TypeError"}, "start": 1760006817790, "stop": 1760006817791, "uuid": "86dcc68a-0861-4a99-9370-22073b4f5f8e", "historyId": "f99514f98decac2a7da64d983bd48620", "testCaseId": "f99514f98decac2a7da64d983bd48620", "fullName": "test_pytest#test_put_a_post", "labels": [{"name": "story", "value": "Обновление объекта"}, {"name": "feature", "value": "Работа с объектами"}, {"name": "suite", "value": "test_pytest"}, {"name": "host", "value": "MacBook-Pro.local"}, {"name": "thread", "value": "26799-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_pytest"}], "titlePath": ["test_pytest.py"]}